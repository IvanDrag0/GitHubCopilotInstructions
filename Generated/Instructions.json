{
  "github.copilot.chat.testGeneration.instructions": [
    "For any language test generation, for each test, define clear criteria for success and failure to ensure reliability.",
    "For any language test generation, validate input and output in all test cases, ensuring they meet expected results.",
    "For any language test generation, write unit tests for every function, focusing on typical use cases and edge cases.",
    "For CSharp language test generation, include edge-case tests to ensure the application behaves correctly in extreme scenarios.",
    "For CSharp language test generation, test for expected exceptions to ensure they are raised and handled appropriately.",
    "For CSharp language test generation, validate asynchronous methods by testing their behavior and results without blocking.",
    "For PowerShell language test generation, create one test file per function to ensure tests are modular and organized.",
    "For PowerShell language test generation, test both success and failure scenarios for each function.",
    "For PowerShell language test generation, validate parameter handling in tests, including invalid inputs and boundary cases.",
    "For PowerShell language test generation, verify that error-handling mechanisms work as expected during failure scenarios."
  ],
  "github.copilot.chat.codeGeneration.instructions": [
    "For any language code generation, always use PascalCase for function, parameter, and varible names.",
    "For any language code generation, avoid lines that are longer than 120 characters, unless it is a URL.",
    "For any language code generation, make sure to include comments to explain the code.",
    "For any language code generation, use pascalcase for naming conventions, including functions, parameters, and variables.",
    "For any language code generation, use try/catch or equivalent error-handling constructs to manage exceptions gracefully.",
    "For any language code generation, validate all inputs before processing.",
    "For any language code generation, when generating code that accepts input, make sure to perform input validation.",
    "For any language code generation, when generating code that can take awhile to execute, make sure to provide the user with some feedback",
    "For CSharp language code generation, optimize memory management by disposing of unmanaged resources and minimizing allocations.",
    "For CSharp language code generation, use async and await for asynchronous operations to prevent blocking the main thread.",
    "For CSharp language code generation, when generating C# functions, make sure to inclue complate XML documentation comments.",
    "For PowerShell language code generation, break long pipelines into multiple lines and indent each new pipe for readability.",
    "For PowerShell language code generation, place each class in its own file to ensure modularity and maintainability.",
    "For PowerShell language code generation, when generating code for PowerShell functions, do not use positional parameters.",
    "For PowerShell language code generation, when generating code for PowerShell functions, for each parameter make sure to include a HelpMessage attribute with a one sentence paramter help message.",
    "For PowerShell language code generation, when generating code for PowerShell functions, for each parameter that is not mandatory, do not include 'Mandatory = $false' in the Parameter attribute.",
    "For PowerShell language code generation, when generating code for PowerShell functions, make sure to format each parameter so that the Parameter attribute is on top (if applicable), followed by the parameter type, followed by the parameter name.",
    "For PowerShell language code generation, when generating code for PowerShell functions, make sure to include full comment-based help for the function.",
    "For PowerShell language code generation, when generating code for PowerShell functions, make sure to include the CmdletBinding and OutputType attributes.",
    "For PowerShell language code generation, when generating multiple PowerShell functions and/or modules, never merge them into a single file.",
    "For PowerShell language code generation, when generating multiple PowerShell functions, make sure to arrange them as one function per file.",
    "For PowerShell language code generation, when generating PowerShell code that can take awhile to execute, make sure to provide the user with some feedback, such as Write-Progress or print some output to the screen.",
    "For PowerShell language code generation, when generating PowerShell code, add a new line and indent after each pipe if there are two or more pipes in the line.",
    "For PowerShell language code generation, when generating PowerShell code, do not use arrays unless absolutely necessary. Instead, use ArrayLists.",
    "For PowerShell language code generation, when generating PowerShell code, if a function call has more than two parameters use splatting.",
    "For PowerShell language code generation, when generating PowerShell code, make sure not to use reserved words and/or automatic variables for variable names.",
    "For PowerShell language code generation, when generating PowerShell code, make sure the code is compatible with Windows PowerShell 5.1.",
    "For PowerShell language code generation, when generating PowerShell code, when checking if a value is $null, make sure to place the $null parameter to the left of the operator.",
    "For PowerShell language code generation, when generating PowerShell functions, do not include boolean parameters. Instead, use switch parameters.",
    "For PowerShell language code generation, when generating PowerShell functions, make sure to use singular nouns for function names and singular parameter names.",
    "For PowerShell language code generation, when generating PowerShell functions, make sure to use singular parameter names.",
    "For PowerShell language code generation, when naming PowerShell functions, make sure to only use approved verbs.",
    "For PowerShell language code generation, when naming PowerShell functions, to include parameter validation where possible."
  ]
}
